# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_elas', [dirname(__file__)])
        except ImportError:
            import _elas
            return _elas
        if fp is not None:
            try:
                _mod = imp.load_module('_elas', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _elas = swig_import_helper()
    del swig_import_helper
else:
    import _elas
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _elas.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(self) -> PyObject *"""
        return _elas.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _elas.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _elas.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(self, x) -> ptrdiff_t"""
        return _elas.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(self, x) -> bool"""
        return _elas.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _elas.SwigPyIterator_copy(self)


    def next(self):
        """next(self) -> PyObject *"""
        return _elas.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(self) -> PyObject *"""
        return _elas.SwigPyIterator___next__(self)


    def previous(self):
        """previous(self) -> PyObject *"""
        return _elas.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(self, n) -> SwigPyIterator"""
        return _elas.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(self, x) -> bool"""
        return _elas.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(self, x) -> bool"""
        return _elas.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(self, n) -> SwigPyIterator"""
        return _elas.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(self, n) -> SwigPyIterator"""
        return _elas.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(self, n) -> SwigPyIterator"""
        return _elas.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _elas.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _elas.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Elas(_object):
    """Proxy of C++ Elas class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Elas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Elas, name)
    __repr__ = _swig_repr
    ROBOTICS = _elas.Elas_ROBOTICS
    MIDDLEBURY = _elas.Elas_MIDDLEBURY

    def __init__(self, param):
        """__init__(self, param) -> Elas"""
        this = _elas.new_Elas(param)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _elas.delete_Elas
    __del__ = lambda self: None

    def process(self, I1, I2, D1, D2, dims):
        """process(self, I1, I2, D1, D2, dims)"""
        return _elas.Elas_process(self, I1, I2, D1, D2, dims)


    def process_stereo(self, image1, image2, disp1, disp2):
        """process_stereo(self, image1, image2, disp1, disp2)"""
        return _elas.Elas_process_stereo(self, image1, image2, disp1, disp2)

Elas_swigregister = _elas.Elas_swigregister
Elas_swigregister(Elas)

class Elas_parameters(_object):
    """Proxy of C++ Elas::parameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Elas_parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Elas_parameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["disp_min"] = _elas.Elas_parameters_disp_min_set
    __swig_getmethods__["disp_min"] = _elas.Elas_parameters_disp_min_get
    if _newclass:
        disp_min = _swig_property(_elas.Elas_parameters_disp_min_get, _elas.Elas_parameters_disp_min_set)
    __swig_setmethods__["disp_max"] = _elas.Elas_parameters_disp_max_set
    __swig_getmethods__["disp_max"] = _elas.Elas_parameters_disp_max_get
    if _newclass:
        disp_max = _swig_property(_elas.Elas_parameters_disp_max_get, _elas.Elas_parameters_disp_max_set)
    __swig_setmethods__["support_threshold"] = _elas.Elas_parameters_support_threshold_set
    __swig_getmethods__["support_threshold"] = _elas.Elas_parameters_support_threshold_get
    if _newclass:
        support_threshold = _swig_property(_elas.Elas_parameters_support_threshold_get, _elas.Elas_parameters_support_threshold_set)
    __swig_setmethods__["support_texture"] = _elas.Elas_parameters_support_texture_set
    __swig_getmethods__["support_texture"] = _elas.Elas_parameters_support_texture_get
    if _newclass:
        support_texture = _swig_property(_elas.Elas_parameters_support_texture_get, _elas.Elas_parameters_support_texture_set)
    __swig_setmethods__["candidate_stepsize"] = _elas.Elas_parameters_candidate_stepsize_set
    __swig_getmethods__["candidate_stepsize"] = _elas.Elas_parameters_candidate_stepsize_get
    if _newclass:
        candidate_stepsize = _swig_property(_elas.Elas_parameters_candidate_stepsize_get, _elas.Elas_parameters_candidate_stepsize_set)
    __swig_setmethods__["incon_window_size"] = _elas.Elas_parameters_incon_window_size_set
    __swig_getmethods__["incon_window_size"] = _elas.Elas_parameters_incon_window_size_get
    if _newclass:
        incon_window_size = _swig_property(_elas.Elas_parameters_incon_window_size_get, _elas.Elas_parameters_incon_window_size_set)
    __swig_setmethods__["incon_threshold"] = _elas.Elas_parameters_incon_threshold_set
    __swig_getmethods__["incon_threshold"] = _elas.Elas_parameters_incon_threshold_get
    if _newclass:
        incon_threshold = _swig_property(_elas.Elas_parameters_incon_threshold_get, _elas.Elas_parameters_incon_threshold_set)
    __swig_setmethods__["incon_min_support"] = _elas.Elas_parameters_incon_min_support_set
    __swig_getmethods__["incon_min_support"] = _elas.Elas_parameters_incon_min_support_get
    if _newclass:
        incon_min_support = _swig_property(_elas.Elas_parameters_incon_min_support_get, _elas.Elas_parameters_incon_min_support_set)
    __swig_setmethods__["add_corners"] = _elas.Elas_parameters_add_corners_set
    __swig_getmethods__["add_corners"] = _elas.Elas_parameters_add_corners_get
    if _newclass:
        add_corners = _swig_property(_elas.Elas_parameters_add_corners_get, _elas.Elas_parameters_add_corners_set)
    __swig_setmethods__["grid_size"] = _elas.Elas_parameters_grid_size_set
    __swig_getmethods__["grid_size"] = _elas.Elas_parameters_grid_size_get
    if _newclass:
        grid_size = _swig_property(_elas.Elas_parameters_grid_size_get, _elas.Elas_parameters_grid_size_set)
    __swig_setmethods__["beta"] = _elas.Elas_parameters_beta_set
    __swig_getmethods__["beta"] = _elas.Elas_parameters_beta_get
    if _newclass:
        beta = _swig_property(_elas.Elas_parameters_beta_get, _elas.Elas_parameters_beta_set)
    __swig_setmethods__["gamma"] = _elas.Elas_parameters_gamma_set
    __swig_getmethods__["gamma"] = _elas.Elas_parameters_gamma_get
    if _newclass:
        gamma = _swig_property(_elas.Elas_parameters_gamma_get, _elas.Elas_parameters_gamma_set)
    __swig_setmethods__["sigma"] = _elas.Elas_parameters_sigma_set
    __swig_getmethods__["sigma"] = _elas.Elas_parameters_sigma_get
    if _newclass:
        sigma = _swig_property(_elas.Elas_parameters_sigma_get, _elas.Elas_parameters_sigma_set)
    __swig_setmethods__["sradius"] = _elas.Elas_parameters_sradius_set
    __swig_getmethods__["sradius"] = _elas.Elas_parameters_sradius_get
    if _newclass:
        sradius = _swig_property(_elas.Elas_parameters_sradius_get, _elas.Elas_parameters_sradius_set)
    __swig_setmethods__["match_texture"] = _elas.Elas_parameters_match_texture_set
    __swig_getmethods__["match_texture"] = _elas.Elas_parameters_match_texture_get
    if _newclass:
        match_texture = _swig_property(_elas.Elas_parameters_match_texture_get, _elas.Elas_parameters_match_texture_set)
    __swig_setmethods__["lr_threshold"] = _elas.Elas_parameters_lr_threshold_set
    __swig_getmethods__["lr_threshold"] = _elas.Elas_parameters_lr_threshold_get
    if _newclass:
        lr_threshold = _swig_property(_elas.Elas_parameters_lr_threshold_get, _elas.Elas_parameters_lr_threshold_set)
    __swig_setmethods__["speckle_sim_threshold"] = _elas.Elas_parameters_speckle_sim_threshold_set
    __swig_getmethods__["speckle_sim_threshold"] = _elas.Elas_parameters_speckle_sim_threshold_get
    if _newclass:
        speckle_sim_threshold = _swig_property(_elas.Elas_parameters_speckle_sim_threshold_get, _elas.Elas_parameters_speckle_sim_threshold_set)
    __swig_setmethods__["speckle_size"] = _elas.Elas_parameters_speckle_size_set
    __swig_getmethods__["speckle_size"] = _elas.Elas_parameters_speckle_size_get
    if _newclass:
        speckle_size = _swig_property(_elas.Elas_parameters_speckle_size_get, _elas.Elas_parameters_speckle_size_set)
    __swig_setmethods__["ipol_gap_width"] = _elas.Elas_parameters_ipol_gap_width_set
    __swig_getmethods__["ipol_gap_width"] = _elas.Elas_parameters_ipol_gap_width_get
    if _newclass:
        ipol_gap_width = _swig_property(_elas.Elas_parameters_ipol_gap_width_get, _elas.Elas_parameters_ipol_gap_width_set)
    __swig_setmethods__["filter_median"] = _elas.Elas_parameters_filter_median_set
    __swig_getmethods__["filter_median"] = _elas.Elas_parameters_filter_median_get
    if _newclass:
        filter_median = _swig_property(_elas.Elas_parameters_filter_median_get, _elas.Elas_parameters_filter_median_set)
    __swig_setmethods__["filter_adaptive_mean"] = _elas.Elas_parameters_filter_adaptive_mean_set
    __swig_getmethods__["filter_adaptive_mean"] = _elas.Elas_parameters_filter_adaptive_mean_get
    if _newclass:
        filter_adaptive_mean = _swig_property(_elas.Elas_parameters_filter_adaptive_mean_get, _elas.Elas_parameters_filter_adaptive_mean_set)
    __swig_setmethods__["postprocess_only_left"] = _elas.Elas_parameters_postprocess_only_left_set
    __swig_getmethods__["postprocess_only_left"] = _elas.Elas_parameters_postprocess_only_left_get
    if _newclass:
        postprocess_only_left = _swig_property(_elas.Elas_parameters_postprocess_only_left_get, _elas.Elas_parameters_postprocess_only_left_set)
    __swig_setmethods__["subsampling"] = _elas.Elas_parameters_subsampling_set
    __swig_getmethods__["subsampling"] = _elas.Elas_parameters_subsampling_get
    if _newclass:
        subsampling = _swig_property(_elas.Elas_parameters_subsampling_get, _elas.Elas_parameters_subsampling_set)

    def __init__(self, *args):
        """
        parameters(s) -> Elas_parameters
        __init__(self) -> Elas_parameters
        """
        this = _elas.new_Elas_parameters(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _elas.delete_Elas_parameters
    __del__ = lambda self: None
Elas_parameters_swigregister = _elas.Elas_parameters_swigregister
Elas_parameters_swigregister(Elas_parameters)


def compute_connected_components(disp, out_labels, d_thresh):
    """compute_connected_components(disp, out_labels, d_thresh) -> int"""
    return _elas.compute_connected_components(disp, out_labels, d_thresh)
# This file is compatible with both classic and new-style classes.


